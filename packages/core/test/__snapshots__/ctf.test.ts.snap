// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ctf > $component > should transform $component 1`] = `
"import { splitProps as _splitProps } from "solid-js";
props_1 => {
  const prop_1 = () => props_1.a,
    prop_2 = () => prop_1().b,
    prop_3 = () => prop_1().c,
    other_2 = _splitProps(prop_1(), ["b", "c"])[1],
    prop_4 = () => props_1.b,
    def_1 = defaultD,
    prop_5 = () => {
      const value_1 = prop_4().d;
      return value_1 === void 0 ? def_1 : value_1;
    },
    def_2 = defaultE,
    prop_6 = () => {
      const value_2 = prop_4().e;
      return value_2 === void 0 ? def_2 : value_2;
    },
    other_3 = _splitProps(prop_4(), ["d", "e"])[1],
    other_1 = _splitProps(props_1, ["a", "b"])[1];
};"
`;

exports[`ctf > $component > should transform $component bindings 1`] = `
"import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
props_1 => {
  const prop_1 = () => props_1.a,
    prop_2 = () => prop_1().b,
    prop_3 = () => prop_1().c,
    other_2 = _splitProps(prop_1(), ["b", "c"])[1],
    prop_4 = () => props_1.b,
    def_1 = defaultD,
    prop_5 = () => {
      const value_1 = prop_4().d;
      return value_1 === void 0 ? def_1 : value_1;
    },
    def_2 = defaultE,
    prop_6 = () => {
      const value_2 = prop_4().e;
      return value_2 === void 0 ? def_2 : value_2;
    },
    other_3 = _splitProps(prop_4(), ["d", "e"])[1],
    other_1 = _splitProps(props_1, ["a", "b"])[1];
  _createEffect(() => {
    console.log(prop_2(), prop_3());
  });
  _createEffect(() => {
    console.log(prop_5(), prop_6());
  });
  _createEffect(() => {
    console.log(other_1);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings 2`] = `
"import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
props_1 => {
  const prop_1 = () => props_1.a,
    prop_2 = () => prop_1().b,
    prop_3 = () => prop_1().c,
    other_2 = _splitProps(prop_1(), ["b", "c"])[1],
    prop_4 = () => props_1.b,
    def_1 = defaultD,
    prop_5 = () => {
      const value_1 = prop_4().d;
      return value_1 === void 0 ? def_1 : value_1;
    },
    def_2 = defaultE,
    prop_6 = () => {
      const value_2 = prop_4().e;
      return value_2 === void 0 ? def_2 : value_2;
    },
    other_3 = _splitProps(prop_4(), ["d", "e"])[1],
    other_1 = _splitProps(props_1, ["a", "b"])[1];
  _createEffect(() => {
    console.log({
      b: prop_2()
    }, {
      c: prop_3()
    });
  });
  _createEffect(() => {
    console.log({
      d: prop_5()
    }, {
      e: prop_6()
    });
  });
  _createEffect(() => {
    console.log(other_1);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings on $get 1`] = `
"import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
props_1 => {
  const prop_1 = () => props_1.a,
    prop_2 = () => prop_1().b,
    prop_3 = () => prop_1().c,
    other_2 = _splitProps(prop_1(), ["b", "c"])[1],
    prop_4 = () => props_1.b,
    def_1 = defaultD,
    prop_5 = () => {
      const value_1 = prop_4().d;
      return value_1 === void 0 ? def_1 : value_1;
    },
    def_2 = defaultE,
    prop_6 = () => {
      const value_2 = prop_4().e;
      return value_2 === void 0 ? def_2 : value_2;
    },
    other_3 = _splitProps(prop_4(), ["d", "e"])[1],
    other_1 = _splitProps(props_1, ["a", "b"])[1];
  _createEffect(() => {
    console.log(prop_2, prop_3);
  });
  _createEffect(() => {
    console.log(prop_5, prop_6);
  });
  _createEffect(() => {
    console.log(other_1);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings on $getter 1`] = `
"const proto_1 = {
    get b() {
      return this.__$get__b();
    }
  },
  proto_2 = {
    get c() {
      return this.__$get__c();
    }
  },
  proto_3 = {
    get d() {
      return this.__$get__d();
    }
  },
  proto_4 = {
    get e() {
      return this.__$get__e();
    }
  };
import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
props_1 => {
  const prop_1 = () => props_1.a,
    prop_2 = () => prop_1().b,
    prop_3 = () => prop_1().c,
    other_2 = _splitProps(prop_1(), ["b", "c"])[1],
    prop_4 = () => props_1.b,
    def_1 = defaultD,
    prop_5 = () => {
      const value_1 = prop_4().d;
      return value_1 === void 0 ? def_1 : value_1;
    },
    def_2 = defaultE,
    prop_6 = () => {
      const value_2 = prop_4().e;
      return value_2 === void 0 ? def_2 : value_2;
    },
    other_3 = _splitProps(prop_4(), ["d", "e"])[1],
    other_1 = _splitProps(props_1, ["a", "b"])[1];
  _createEffect(() => {
    console.log({
      __proto__: proto_1,
      __$get__b: prop_2
    }, {
      __proto__: proto_2,
      __$get__c: prop_3
    });
  });
  _createEffect(() => {
    console.log({
      __proto__: proto_3,
      __$get__d: prop_5
    }, {
      __proto__: proto_4,
      __$get__e: prop_6
    });
  });
  _createEffect(() => {
    console.log(other_1);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings on $property 1`] = `
"const proto_1 = {
    get b() {
      return this.__$get__b();
    }
  },
  proto_2 = {
    get c() {
      return this.__$get__c();
    }
  },
  proto_3 = {
    get d() {
      return this.__$get__d();
    }
  },
  proto_4 = {
    get e() {
      return this.__$get__e();
    }
  };
import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
props_1 => {
  const prop_1 = () => props_1.a,
    prop_2 = () => prop_1().b,
    prop_3 = () => prop_1().c,
    other_2 = _splitProps(prop_1(), ["b", "c"])[1],
    prop_4 = () => props_1.b,
    def_1 = defaultD,
    prop_5 = () => {
      const value_1 = prop_4().d;
      return value_1 === void 0 ? def_1 : value_1;
    },
    def_2 = defaultE,
    prop_6 = () => {
      const value_2 = prop_4().e;
      return value_2 === void 0 ? def_2 : value_2;
    },
    other_3 = _splitProps(prop_4(), ["d", "e"])[1],
    other_1 = _splitProps(props_1, ["a", "b"])[1];
  _createEffect(() => {
    console.log({
      __proto__: proto_1,
      __$get__b: prop_2
    }, {
      __proto__: proto_2,
      __$get__c: prop_3
    });
  });
  _createEffect(() => {
    console.log({
      __proto__: proto_3,
      __$get__d: prop_5
    }, {
      __proto__: proto_4,
      __$get__e: prop_6
    });
  });
  _createEffect(() => {
    console.log(other_1);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings on $refMemo 1`] = `
"import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
props_1 => {
  const prop_1 = () => props_1.a,
    prop_2 = () => prop_1().b,
    prop_3 = () => prop_1().c,
    other_2 = _splitProps(prop_1(), ["b", "c"])[1],
    prop_4 = () => props_1.b,
    def_1 = defaultD,
    prop_5 = () => {
      const value_1 = prop_4().d;
      return value_1 === void 0 ? def_1 : value_1;
    },
    def_2 = defaultE,
    prop_6 = () => {
      const value_2 = prop_4().e;
      return value_2 === void 0 ? def_2 : value_2;
    },
    other_3 = _splitProps(prop_4(), ["d", "e"])[1],
    other_1 = _splitProps(props_1, ["a", "b"])[1];
  _createEffect(() => {
    console.log(prop_2, prop_3);
  });
  _createEffect(() => {
    console.log(prop_5, prop_6);
  });
  _createEffect(() => {
    console.log(other_1);
  });
};"
`;

exports[`ctf > $derefMemo > should transform $derefMemo 1`] = `"const message_1 = () => \`Count: \${count}\`;"`;

exports[`ctf > $derefMemo > should transform $derefMemo bindings 1`] = `
"const message_1 = () => \`Count: \${count}\`;
const value = message_1();"
`;

exports[`ctf > $derefMemo > should transform $derefMemo bindings 2`] = `
"const message_1 = () => \`Count: \${count}\`;
const value = {
  message: message_1()
};"
`;

exports[`ctf > $derefMemo > should transform $derefMemo on $get 1`] = `
"const message_1 = () => \`Count: \${count}\`;
const value = message_1;"
`;

exports[`ctf > $derefMemo > should transform $derefMemo on $getter 1`] = `
"const proto_1 = {
  get message() {
    return this.__$get__message();
  }
};
const message_1 = () => \`Count: \${count}\`;
const value = {
  __proto__: proto_1,
  __$get__message: message_1
};"
`;

exports[`ctf > $derefMemo > should transform $derefMemo on $property 1`] = `
"const proto_1 = {
  get message() {
    return this.__$get__message();
  }
};
const message_1 = () => \`Count: \${count}\`;
const value = {
  __proto__: proto_1,
  __$get__message: message_1
};"
`;

exports[`ctf > $derefMemo > should transform $derefMemo on $refMemo 1`] = `
"const message_1 = () => \`Count: \${count}\`;
const value = message_1;"
`;

exports[`ctf > $derefSignal > should transform $derefSignal 1`] = `"const [count_1, setcount_1] = createSignal(0);"`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings 1`] = `
"const [count_1, setcount_1] = createSignal(0);
const value = count_1();"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings 2`] = `
"const [count_1, setcount_1] = createSignal(0);
const value = {
  count: count_1()
};"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $get 1`] = `
"const [count_1, setcount_1] = createSignal(0);
const value = count_1;"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $getter 1`] = `
"const proto_1 = {
  get count() {
    return this.__$get__count();
  }
};
const [count_1, setcount_1] = createSignal(0);
const value = {
  __proto__: proto_1,
  __$get__count: setcount_1
};"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $property 1`] = `
"const proto_1 = {
  get count() {
    return this.__$get__count();
  },
  set count(param_1) {
    this.__$set__count(() => param_1);
  }
};
const [count_1, setcount_1] = createSignal(0);
const value = {
  __proto__: proto_1,
  __$get__count: count_1,
  __$set__count: setcount_1
};"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $refSignal 1`] = `
"const [count_1, setcount_1] = createSignal(0);
const value = [count_1, setcount_1];"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $set 1`] = `
"const [count_1, setcount_1] = createSignal(0);
const value = setcount_1;"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $setter 1`] = `
"const proto_1 = {
  set count(param_1) {
    this.__$set__count(() => param_1);
  }
};
const [count_1, setcount_1] = createSignal(0);
const value = {
  __proto__: proto_1,
  __$set__count: setcount_1
};"
`;

exports[`ctf > $destructure > should transform $destructure 1`] = `
"import { splitProps as _splitProps } from "solid-js";
let prop_1 = () => x.a,
  prop_2 = () => prop_1().b,
  prop_3 = () => prop_1().c,
  other_2 = _splitProps(prop_1(), ["b", "c"])[1],
  prop_4 = () => x.b,
  def_1 = defaultD,
  prop_5 = () => {
    const value_1 = prop_4().d;
    return value_1 === void 0 ? def_1 : value_1;
  },
  def_2 = defaultE,
  prop_6 = () => {
    const value_2 = prop_4().e;
    return value_2 === void 0 ? def_2 : value_2;
  },
  other_3 = _splitProps(prop_4(), ["d", "e"])[1],
  other_1 = _splitProps(x, ["a", "b"])[1];"
`;

exports[`ctf > $destructure > should transform $destructure bindings 1`] = `
"import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
let prop_1 = () => x.a,
  prop_2 = () => prop_1().b,
  prop_3 = () => prop_1().c,
  other_2 = _splitProps(prop_1(), ["b", "c"])[1],
  prop_4 = () => x.b,
  def_1 = defaultD,
  prop_5 = () => {
    const value_1 = prop_4().d;
    return value_1 === void 0 ? def_1 : value_1;
  },
  def_2 = defaultE,
  prop_6 = () => {
    const value_2 = prop_4().e;
    return value_2 === void 0 ? def_2 : value_2;
  },
  other_3 = _splitProps(prop_4(), ["d", "e"])[1],
  other_1 = _splitProps(x, ["a", "b"])[1];
_createEffect(() => {
  console.log(prop_2(), prop_3());
});
_createEffect(() => {
  console.log(prop_5(), prop_6());
});
_createEffect(() => {
  console.log(other_1);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings 2`] = `
"import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
let prop_1 = () => x.a,
  prop_2 = () => prop_1().b,
  prop_3 = () => prop_1().c,
  other_2 = _splitProps(prop_1(), ["b", "c"])[1],
  prop_4 = () => x.b,
  def_1 = defaultD,
  prop_5 = () => {
    const value_1 = prop_4().d;
    return value_1 === void 0 ? def_1 : value_1;
  },
  def_2 = defaultE,
  prop_6 = () => {
    const value_2 = prop_4().e;
    return value_2 === void 0 ? def_2 : value_2;
  },
  other_3 = _splitProps(prop_4(), ["d", "e"])[1],
  other_1 = _splitProps(x, ["a", "b"])[1];
_createEffect(() => {
  console.log({
    b: prop_2()
  }, {
    c: prop_3()
  });
});
_createEffect(() => {
  console.log({
    d: prop_5()
  }, {
    e: prop_6()
  });
});
_createEffect(() => {
  console.log(other_1);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings on $get 1`] = `
"import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
let prop_1 = () => x.a,
  prop_2 = () => prop_1().b,
  prop_3 = () => prop_1().c,
  other_2 = _splitProps(prop_1(), ["b", "c"])[1],
  prop_4 = () => x.b,
  def_1 = defaultD,
  prop_5 = () => {
    const value_1 = prop_4().d;
    return value_1 === void 0 ? def_1 : value_1;
  },
  def_2 = defaultE,
  prop_6 = () => {
    const value_2 = prop_4().e;
    return value_2 === void 0 ? def_2 : value_2;
  },
  other_3 = _splitProps(prop_4(), ["d", "e"])[1],
  other_1 = _splitProps(x, ["a", "b"])[1];
_createEffect(() => {
  console.log(prop_2, prop_3);
});
_createEffect(() => {
  console.log(prop_5, prop_6);
});
_createEffect(() => {
  console.log(other_1);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings on $getter 1`] = `
"const proto_1 = {
    get b() {
      return this.__$get__b();
    }
  },
  proto_2 = {
    get c() {
      return this.__$get__c();
    }
  },
  proto_3 = {
    get d() {
      return this.__$get__d();
    }
  },
  proto_4 = {
    get e() {
      return this.__$get__e();
    }
  };
import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
let prop_1 = () => x.a,
  prop_2 = () => prop_1().b,
  prop_3 = () => prop_1().c,
  other_2 = _splitProps(prop_1(), ["b", "c"])[1],
  prop_4 = () => x.b,
  def_1 = defaultD,
  prop_5 = () => {
    const value_1 = prop_4().d;
    return value_1 === void 0 ? def_1 : value_1;
  },
  def_2 = defaultE,
  prop_6 = () => {
    const value_2 = prop_4().e;
    return value_2 === void 0 ? def_2 : value_2;
  },
  other_3 = _splitProps(prop_4(), ["d", "e"])[1],
  other_1 = _splitProps(x, ["a", "b"])[1];
_createEffect(() => {
  console.log({
    __proto__: proto_1,
    __$get__b: prop_2
  }, {
    __proto__: proto_2,
    __$get__c: prop_3
  });
});
_createEffect(() => {
  console.log({
    __proto__: proto_3,
    __$get__d: prop_5
  }, {
    __proto__: proto_4,
    __$get__e: prop_6
  });
});
_createEffect(() => {
  console.log(other_1);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings on $property 1`] = `
"const proto_1 = {
    get b() {
      return this.__$get__b();
    }
  },
  proto_2 = {
    get c() {
      return this.__$get__c();
    }
  },
  proto_3 = {
    get d() {
      return this.__$get__d();
    }
  },
  proto_4 = {
    get e() {
      return this.__$get__e();
    }
  };
import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
let prop_1 = () => x.a,
  prop_2 = () => prop_1().b,
  prop_3 = () => prop_1().c,
  other_2 = _splitProps(prop_1(), ["b", "c"])[1],
  prop_4 = () => x.b,
  def_1 = defaultD,
  prop_5 = () => {
    const value_1 = prop_4().d;
    return value_1 === void 0 ? def_1 : value_1;
  },
  def_2 = defaultE,
  prop_6 = () => {
    const value_2 = prop_4().e;
    return value_2 === void 0 ? def_2 : value_2;
  },
  other_3 = _splitProps(prop_4(), ["d", "e"])[1],
  other_1 = _splitProps(x, ["a", "b"])[1];
_createEffect(() => {
  console.log({
    __proto__: proto_1,
    __$get__b: prop_2
  }, {
    __proto__: proto_2,
    __$get__c: prop_3
  });
});
_createEffect(() => {
  console.log({
    __proto__: proto_3,
    __$get__d: prop_5
  }, {
    __proto__: proto_4,
    __$get__e: prop_6
  });
});
_createEffect(() => {
  console.log(other_1);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings on $refMemo 1`] = `
"import { splitProps as _splitProps } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
let prop_1 = () => x.a,
  prop_2 = () => prop_1().b,
  prop_3 = () => prop_1().c,
  other_2 = _splitProps(prop_1(), ["b", "c"])[1],
  prop_4 = () => x.b,
  def_1 = defaultD,
  prop_5 = () => {
    const value_1 = prop_4().d;
    return value_1 === void 0 ? def_1 : value_1;
  },
  def_2 = defaultE,
  prop_6 = () => {
    const value_2 = prop_4().e;
    return value_2 === void 0 ? def_2 : value_2;
  },
  other_3 = _splitProps(prop_4(), ["d", "e"])[1],
  other_1 = _splitProps(x, ["a", "b"])[1];
_createEffect(() => {
  console.log(prop_2, prop_3);
});
_createEffect(() => {
  console.log(prop_5, prop_6);
});
_createEffect(() => {
  console.log(other_1);
});"
`;

exports[`ctf > $effect, $renderEffect, $computed > should transform $effect, $renderEffect, $computed 1`] = `
"import { createRenderEffect as _createRenderEffect } from "solid-js";
import { createComputed as _createComputed } from "solid-js";
import { createEffect as _createEffect } from "solid-js";
import { createSignal as _createSignal } from "solid-js";
let [x_1, setx_1] = _createSignal(0);
_createEffect(() => {
  console.log('Count', x_1());
});
_createComputed(() => {
  console.log('Count', x_1());
});
_createRenderEffect(() => {
  console.log('Count', x_1());
});"
`;

exports[`ctf > $memo > should transform $memo 1`] = `
"import { createMemo as _createMemo } from "solid-js";
const message_1 = _createMemo(() => \`Count: \${count}\`);"
`;

exports[`ctf > $memo > should transform $memo bindings 1`] = `
"import { createMemo as _createMemo } from "solid-js";
const message_1 = _createMemo(() => \`Count: \${count}\`);
const value = message_1();"
`;

exports[`ctf > $memo > should transform $memo bindings 2`] = `
"import { createMemo as _createMemo } from "solid-js";
const message_1 = _createMemo(() => \`Count: \${count}\`);
const value = {
  message: message_1()
};"
`;

exports[`ctf > $memo > should transform $memo on $get 1`] = `
"import { createMemo as _createMemo } from "solid-js";
const message_1 = _createMemo(() => \`Count: \${count}\`);
const value = message_1;"
`;

exports[`ctf > $memo > should transform $memo on $getter 1`] = `
"const proto_1 = {
  get message() {
    return this.__$get__message();
  }
};
import { createMemo as _createMemo } from "solid-js";
const message_1 = _createMemo(() => \`Count: \${count}\`);
const value = {
  __proto__: proto_1,
  __$get__message: message_1
};"
`;

exports[`ctf > $memo > should transform $memo on $property 1`] = `
"const proto_1 = {
  get message() {
    return this.__$get__message();
  }
};
import { createMemo as _createMemo } from "solid-js";
const message_1 = _createMemo(() => \`Count: \${count}\`);
const value = {
  __proto__: proto_1,
  __$get__message: message_1
};"
`;

exports[`ctf > $memo > should transform $memo on $refMemo 1`] = `
"import { createMemo as _createMemo } from "solid-js";
const message_1 = _createMemo(() => \`Count: \${count}\`);
const value = message_1;"
`;

exports[`ctf > $signal > should transform $signal 1`] = `
"import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);"
`;

exports[`ctf > $signal > should transform $signal bindings 1`] = `
"import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);
const value = count_1();"
`;

exports[`ctf > $signal > should transform $signal bindings 2`] = `
"import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);
const value = {
  count: count_1()
};"
`;

exports[`ctf > $signal > should transform $signal bindings 3`] = `
"import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);
async function exampleA() {
  const tmp_1 = await asyncValue();
  setcount_1(() => tmp_1);
}
function* exampleB() {
  const tmp_2 = yield asyncValue();
  setcount_1(() => tmp_2);
}
async function* exampleC() {
  const tmp_3 = yield asyncValue();
  setcount_1(() => tmp_3);
}
const example = async () => {
  const tmp_4 = await asyncValue();
  return setcount_1(() => tmp_4);
};"
`;

exports[`ctf > $signal > should transform $signal bindings for $get 1`] = `
"import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);
const value = count_1;"
`;

exports[`ctf > $signal > should transform $signal bindings for $getter 1`] = `
"const proto_1 = {
  get count() {
    return this.__$get__count();
  }
};
import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);
const value = {
  __proto__: proto_1,
  __$get__count: setcount_1
};"
`;

exports[`ctf > $signal > should transform $signal bindings for $property 1`] = `
"const proto_1 = {
  get count() {
    return this.__$get__count();
  },
  set count(param_1) {
    this.__$set__count(() => param_1);
  }
};
import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);
const value = {
  __proto__: proto_1,
  __$get__count: count_1,
  __$set__count: setcount_1
};"
`;

exports[`ctf > $signal > should transform $signal bindings for $refSignal 1`] = `
"import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);
const value = [count_1, setcount_1];"
`;

exports[`ctf > $signal > should transform $signal bindings for $set 1`] = `
"import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);
const value = setcount_1;"
`;

exports[`ctf > $signal > should transform $signal bindings for $setter 1`] = `
"const proto_1 = {
  set count(param_1) {
    this.__$set__count(() => param_1);
  }
};
import { createSignal as _createSignal } from "solid-js";
let [count_1, setcount_1] = _createSignal(0);
const value = {
  __proto__: proto_1,
  __$set__count: setcount_1
};"
`;

exports[`ctf > variable shadowing > should respect variable shadowing 1`] = `
"import { createSignal as _createSignal } from "solid-js";
const [selected_1, setselected_1] = _createSignal('root');
{
  const selected = 'local';
  console.log(selected); // 'local'
  {
    console.log(selected); // 'local'
    {
      const [selected_2, setselected_2] = _createSignal('inner');
      console.log(selected_2()); // 'inner'
      {
        console.log(selected_2()); // 'inner'
      }
    }
  }
}"
`;

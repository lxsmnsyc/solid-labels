// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ctf > $component > should transform $component 1`] = `
"import { splitProps as _splitProps } from \\"solid-js\\";
_props => {
  const _prop = () => _props.a,
    _prop2 = () => _prop().b,
    _prop3 = () => _prop().c,
    _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
    _prop4 = () => _props.b,
    _def = defaultD,
    _prop5 = () => {
      const _value = _prop4().d;
      return _value === undefined ? _def : _value;
    },
    _def2 = defaultE,
    _prop6 = () => {
      const _value2 = _prop4().e;
      return _value2 === undefined ? _def2 : _value2;
    },
    _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
    _other = _splitProps(_props, [\\"a\\", \\"b\\"])[1];
};"
`;

exports[`ctf > $component > should transform $component bindings 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
_props => {
  const _prop = () => _props.a,
    _prop2 = () => _prop().b,
    _prop3 = () => _prop().c,
    _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
    _prop4 = () => _props.b,
    _def = defaultD,
    _prop5 = () => {
      const _value = _prop4().d;
      return _value === undefined ? _def : _value;
    },
    _def2 = defaultE,
    _prop6 = () => {
      const _value2 = _prop4().e;
      return _value2 === undefined ? _def2 : _value2;
    },
    _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
    _other = _splitProps(_props, [\\"a\\", \\"b\\"])[1];
  _createEffect(() => {
    console.log(_prop2(), _prop3());
  });
  _createEffect(() => {
    console.log(_prop5(), _prop6());
  });
  _createEffect(() => {
    console.log(_other);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings 2`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
_props => {
  const _prop = () => _props.a,
    _prop2 = () => _prop().b,
    _prop3 = () => _prop().c,
    _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
    _prop4 = () => _props.b,
    _def = defaultD,
    _prop5 = () => {
      const _value = _prop4().d;
      return _value === undefined ? _def : _value;
    },
    _def2 = defaultE,
    _prop6 = () => {
      const _value2 = _prop4().e;
      return _value2 === undefined ? _def2 : _value2;
    },
    _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
    _other = _splitProps(_props, [\\"a\\", \\"b\\"])[1];
  _createEffect(() => {
    console.log({
      b: _prop2()
    }, {
      c: _prop3()
    });
  });
  _createEffect(() => {
    console.log({
      d: _prop5()
    }, {
      e: _prop6()
    });
  });
  _createEffect(() => {
    console.log(_other);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings on $get 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
_props => {
  const _prop = () => _props.a,
    _prop2 = () => _prop().b,
    _prop3 = () => _prop().c,
    _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
    _prop4 = () => _props.b,
    _def = defaultD,
    _prop5 = () => {
      const _value = _prop4().d;
      return _value === undefined ? _def : _value;
    },
    _def2 = defaultE,
    _prop6 = () => {
      const _value2 = _prop4().e;
      return _value2 === undefined ? _def2 : _value2;
    },
    _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
    _other = _splitProps(_props, [\\"a\\", \\"b\\"])[1];
  _createEffect(() => {
    console.log(_prop2, _prop3);
  });
  _createEffect(() => {
    console.log(_prop5, _prop6);
  });
  _createEffect(() => {
    console.log(_other);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings on $getter 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
const _proto = {
    get b() {
      return this.__$get__b();
    }
  },
  _proto2 = {
    get c() {
      return this.__$get__c();
    }
  },
  _proto3 = {
    get d() {
      return this.__$get__d();
    }
  },
  _proto4 = {
    get e() {
      return this.__$get__e();
    }
  };
_props => {
  const _prop = () => _props.a,
    _prop2 = () => _prop().b,
    _prop3 = () => _prop().c,
    _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
    _prop4 = () => _props.b,
    _def = defaultD,
    _prop5 = () => {
      const _value = _prop4().d;
      return _value === undefined ? _def : _value;
    },
    _def2 = defaultE,
    _prop6 = () => {
      const _value2 = _prop4().e;
      return _value2 === undefined ? _def2 : _value2;
    },
    _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
    _other = _splitProps(_props, [\\"a\\", \\"b\\"])[1];
  _createEffect(() => {
    console.log({
      __proto__: _proto,
      __$get__b: _prop2
    }, {
      __proto__: _proto2,
      __$get__c: _prop3
    });
  });
  _createEffect(() => {
    console.log({
      __proto__: _proto3,
      __$get__d: _prop5
    }, {
      __proto__: _proto4,
      __$get__e: _prop6
    });
  });
  _createEffect(() => {
    console.log(_other);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings on $property 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
const _proto = {
    get b() {
      return this.__$get__b();
    }
  },
  _proto2 = {
    get c() {
      return this.__$get__c();
    }
  },
  _proto3 = {
    get d() {
      return this.__$get__d();
    }
  },
  _proto4 = {
    get e() {
      return this.__$get__e();
    }
  };
_props => {
  const _prop = () => _props.a,
    _prop2 = () => _prop().b,
    _prop3 = () => _prop().c,
    _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
    _prop4 = () => _props.b,
    _def = defaultD,
    _prop5 = () => {
      const _value = _prop4().d;
      return _value === undefined ? _def : _value;
    },
    _def2 = defaultE,
    _prop6 = () => {
      const _value2 = _prop4().e;
      return _value2 === undefined ? _def2 : _value2;
    },
    _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
    _other = _splitProps(_props, [\\"a\\", \\"b\\"])[1];
  _createEffect(() => {
    console.log({
      __proto__: _proto,
      __$get__b: _prop2
    }, {
      __proto__: _proto2,
      __$get__c: _prop3
    });
  });
  _createEffect(() => {
    console.log({
      __proto__: _proto3,
      __$get__d: _prop5
    }, {
      __proto__: _proto4,
      __$get__e: _prop6
    });
  });
  _createEffect(() => {
    console.log(_other);
  });
};"
`;

exports[`ctf > $component > should transform $component bindings on $refMemo 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
_props => {
  const _prop = () => _props.a,
    _prop2 = () => _prop().b,
    _prop3 = () => _prop().c,
    _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
    _prop4 = () => _props.b,
    _def = defaultD,
    _prop5 = () => {
      const _value = _prop4().d;
      return _value === undefined ? _def : _value;
    },
    _def2 = defaultE,
    _prop6 = () => {
      const _value2 = _prop4().e;
      return _value2 === undefined ? _def2 : _value2;
    },
    _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
    _other = _splitProps(_props, [\\"a\\", \\"b\\"])[1];
  _createEffect(() => {
    console.log(_prop2, _prop3);
  });
  _createEffect(() => {
    console.log(_prop5, _prop6);
  });
  _createEffect(() => {
    console.log(_other);
  });
};"
`;

exports[`ctf > $derefMemo > should transform $derefMemo 1`] = `"const _message = () => \`Count: \${count}\`;"`;

exports[`ctf > $derefMemo > should transform $derefMemo bindings 1`] = `
"const _message = () => \`Count: \${count}\`;
const value = _message();"
`;

exports[`ctf > $derefMemo > should transform $derefMemo bindings 2`] = `
"const _message = () => \`Count: \${count}\`;
const value = {
  message: _message()
};"
`;

exports[`ctf > $derefMemo > should transform $derefMemo on $get 1`] = `
"const _message = () => \`Count: \${count}\`;
const value = _message;"
`;

exports[`ctf > $derefMemo > should transform $derefMemo on $getter 1`] = `
"const _proto = {
  get message() {
    return this.__$get__message();
  }
};
const _message = () => \`Count: \${count}\`;
const value = {
  __proto__: _proto,
  __$get__message: _message
};"
`;

exports[`ctf > $derefMemo > should transform $derefMemo on $property 1`] = `
"const _proto = {
  get message() {
    return this.__$get__message();
  }
};
const _message = () => \`Count: \${count}\`;
const value = {
  __proto__: _proto,
  __$get__message: _message
};"
`;

exports[`ctf > $derefMemo > should transform $derefMemo on $refMemo 1`] = `
"const _message = () => \`Count: \${count}\`;
const value = _message;"
`;

exports[`ctf > $derefSignal > should transform $derefSignal 1`] = `"const [_count, _setcount] = createSignal(0);"`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings 1`] = `
"const [_count, _setcount] = createSignal(0);
const value = _count();"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings 2`] = `
"const [_count, _setcount] = createSignal(0);
const value = {
  count: _count()
};"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $get 1`] = `
"const [_count, _setcount] = createSignal(0);
const value = _count;"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $getter 1`] = `
"const _proto = {
  get count() {
    return this.__$get__count();
  }
};
const [_count, _setcount] = createSignal(0);
const value = {
  __proto__: _proto,
  __$get__count: _count
};"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $property 1`] = `
"const _proto = {
  get count() {
    return this.__$get__count();
  },
  set count(_param) {
    this.__$set__count(() => _param);
  }
};
const [_count, _setcount] = createSignal(0);
const value = {
  __proto__: _proto,
  __$get__count: _count,
  __$set__count: _setcount
};"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $refSignal 1`] = `
"const [_count, _setcount] = createSignal(0);
const value = [_count, _setcount];"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $set 1`] = `
"const [_count, _setcount] = createSignal(0);
const value = _setcount;"
`;

exports[`ctf > $derefSignal > should transform $derefSignal bindings for $setter 1`] = `
"const _proto = {
  set count(_param) {
    this.__$set__count(() => _param);
  }
};
const [_count, _setcount] = createSignal(0);
const value = {
  __proto__: _proto,
  __$set__count: _setcount
};"
`;

exports[`ctf > $destructure > should transform $destructure 1`] = `
"import { splitProps as _splitProps } from \\"solid-js\\";
let _prop = () => x.a,
  _prop2 = () => _prop().b,
  _prop3 = () => _prop().c,
  _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
  _prop4 = () => x.b,
  _def = defaultD,
  _prop5 = () => {
    const _value = _prop4().d;
    return _value === undefined ? _def : _value;
  },
  _def2 = defaultE,
  _prop6 = () => {
    const _value2 = _prop4().e;
    return _value2 === undefined ? _def2 : _value2;
  },
  _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
  _other = _splitProps(x, [\\"a\\", \\"b\\"])[1];"
`;

exports[`ctf > $destructure > should transform $destructure bindings 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
let _prop = () => x.a,
  _prop2 = () => _prop().b,
  _prop3 = () => _prop().c,
  _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
  _prop4 = () => x.b,
  _def = defaultD,
  _prop5 = () => {
    const _value = _prop4().d;
    return _value === undefined ? _def : _value;
  },
  _def2 = defaultE,
  _prop6 = () => {
    const _value2 = _prop4().e;
    return _value2 === undefined ? _def2 : _value2;
  },
  _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
  _other = _splitProps(x, [\\"a\\", \\"b\\"])[1];
_createEffect(() => {
  console.log(_prop2(), _prop3());
});
_createEffect(() => {
  console.log(_prop5(), _prop6());
});
_createEffect(() => {
  console.log(_other);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings 2`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
let _prop = () => x.a,
  _prop2 = () => _prop().b,
  _prop3 = () => _prop().c,
  _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
  _prop4 = () => x.b,
  _def = defaultD,
  _prop5 = () => {
    const _value = _prop4().d;
    return _value === undefined ? _def : _value;
  },
  _def2 = defaultE,
  _prop6 = () => {
    const _value2 = _prop4().e;
    return _value2 === undefined ? _def2 : _value2;
  },
  _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
  _other = _splitProps(x, [\\"a\\", \\"b\\"])[1];
_createEffect(() => {
  console.log({
    b: _prop2()
  }, {
    c: _prop3()
  });
});
_createEffect(() => {
  console.log({
    d: _prop5()
  }, {
    e: _prop6()
  });
});
_createEffect(() => {
  console.log(_other);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings on $get 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
let _prop = () => x.a,
  _prop2 = () => _prop().b,
  _prop3 = () => _prop().c,
  _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
  _prop4 = () => x.b,
  _def = defaultD,
  _prop5 = () => {
    const _value = _prop4().d;
    return _value === undefined ? _def : _value;
  },
  _def2 = defaultE,
  _prop6 = () => {
    const _value2 = _prop4().e;
    return _value2 === undefined ? _def2 : _value2;
  },
  _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
  _other = _splitProps(x, [\\"a\\", \\"b\\"])[1];
_createEffect(() => {
  console.log(_prop2, _prop3);
});
_createEffect(() => {
  console.log(_prop5, _prop6);
});
_createEffect(() => {
  console.log(_other);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings on $getter 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
const _proto = {
    get b() {
      return this.__$get__b();
    }
  },
  _proto2 = {
    get c() {
      return this.__$get__c();
    }
  },
  _proto3 = {
    get d() {
      return this.__$get__d();
    }
  },
  _proto4 = {
    get e() {
      return this.__$get__e();
    }
  };
let _prop = () => x.a,
  _prop2 = () => _prop().b,
  _prop3 = () => _prop().c,
  _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
  _prop4 = () => x.b,
  _def = defaultD,
  _prop5 = () => {
    const _value = _prop4().d;
    return _value === undefined ? _def : _value;
  },
  _def2 = defaultE,
  _prop6 = () => {
    const _value2 = _prop4().e;
    return _value2 === undefined ? _def2 : _value2;
  },
  _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
  _other = _splitProps(x, [\\"a\\", \\"b\\"])[1];
_createEffect(() => {
  console.log({
    __proto__: _proto,
    __$get__b: _prop2
  }, {
    __proto__: _proto2,
    __$get__c: _prop3
  });
});
_createEffect(() => {
  console.log({
    __proto__: _proto3,
    __$get__d: _prop5
  }, {
    __proto__: _proto4,
    __$get__e: _prop6
  });
});
_createEffect(() => {
  console.log(_other);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings on $property 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
const _proto = {
    get b() {
      return this.__$get__b();
    }
  },
  _proto2 = {
    get c() {
      return this.__$get__c();
    }
  },
  _proto3 = {
    get d() {
      return this.__$get__d();
    }
  },
  _proto4 = {
    get e() {
      return this.__$get__e();
    }
  };
let _prop = () => x.a,
  _prop2 = () => _prop().b,
  _prop3 = () => _prop().c,
  _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
  _prop4 = () => x.b,
  _def = defaultD,
  _prop5 = () => {
    const _value = _prop4().d;
    return _value === undefined ? _def : _value;
  },
  _def2 = defaultE,
  _prop6 = () => {
    const _value2 = _prop4().e;
    return _value2 === undefined ? _def2 : _value2;
  },
  _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
  _other = _splitProps(x, [\\"a\\", \\"b\\"])[1];
_createEffect(() => {
  console.log({
    __proto__: _proto,
    __$get__b: _prop2
  }, {
    __proto__: _proto2,
    __$get__c: _prop3
  });
});
_createEffect(() => {
  console.log({
    __proto__: _proto3,
    __$get__d: _prop5
  }, {
    __proto__: _proto4,
    __$get__e: _prop6
  });
});
_createEffect(() => {
  console.log(_other);
});"
`;

exports[`ctf > $destructure > should transform $destructure bindings on $refMemo 1`] = `
"import { createEffect as _createEffect, splitProps as _splitProps } from \\"solid-js\\";
let _prop = () => x.a,
  _prop2 = () => _prop().b,
  _prop3 = () => _prop().c,
  _other2 = _splitProps(_prop(), [\\"b\\", \\"c\\"])[1],
  _prop4 = () => x.b,
  _def = defaultD,
  _prop5 = () => {
    const _value = _prop4().d;
    return _value === undefined ? _def : _value;
  },
  _def2 = defaultE,
  _prop6 = () => {
    const _value2 = _prop4().e;
    return _value2 === undefined ? _def2 : _value2;
  },
  _other3 = _splitProps(_prop4(), [\\"d\\", \\"e\\"])[1],
  _other = _splitProps(x, [\\"a\\", \\"b\\"])[1];
_createEffect(() => {
  console.log(_prop2, _prop3);
});
_createEffect(() => {
  console.log(_prop5, _prop6);
});
_createEffect(() => {
  console.log(_other);
});"
`;

exports[`ctf > $effect, $renderEffect, $computed > should transform $effect, $renderEffect, $computed 1`] = `
"import { createSignal as _createSignal, createEffect as _createEffect, createComputed as _createComputed, createRenderEffect as _createRenderEffect } from \\"solid-js\\";
let [_x, _setx] = _createSignal(0);
_createEffect(() => {
  console.log('Count', _x());
});
_createComputed(() => {
  console.log('Count', _x());
});
_createRenderEffect(() => {
  console.log('Count', _x());
});"
`;

exports[`ctf > $memo > should transform $memo 1`] = `
"import { createMemo as _createMemo } from \\"solid-js\\";
const _message = _createMemo(() => \`Count: \${count}\`);"
`;

exports[`ctf > $memo > should transform $memo bindings 1`] = `
"import { createMemo as _createMemo } from \\"solid-js\\";
const _message = _createMemo(() => \`Count: \${count}\`);
const value = _message();"
`;

exports[`ctf > $memo > should transform $memo bindings 2`] = `
"import { createMemo as _createMemo } from \\"solid-js\\";
const _message = _createMemo(() => \`Count: \${count}\`);
const value = {
  message: _message()
};"
`;

exports[`ctf > $memo > should transform $memo on $get 1`] = `
"import { createMemo as _createMemo } from \\"solid-js\\";
const _message = _createMemo(() => \`Count: \${count}\`);
const value = _message;"
`;

exports[`ctf > $memo > should transform $memo on $getter 1`] = `
"import { createMemo as _createMemo } from \\"solid-js\\";
const _proto = {
  get message() {
    return this.__$get__message();
  }
};
const _message = _createMemo(() => \`Count: \${count}\`);
const value = {
  __proto__: _proto,
  __$get__message: _message
};"
`;

exports[`ctf > $memo > should transform $memo on $property 1`] = `
"import { createMemo as _createMemo } from \\"solid-js\\";
const _proto = {
  get message() {
    return this.__$get__message();
  }
};
const _message = _createMemo(() => \`Count: \${count}\`);
const value = {
  __proto__: _proto,
  __$get__message: _message
};"
`;

exports[`ctf > $memo > should transform $memo on $refMemo 1`] = `
"import { createMemo as _createMemo } from \\"solid-js\\";
const _message = _createMemo(() => \`Count: \${count}\`);
const value = _message;"
`;

exports[`ctf > $signal > should transform $signal 1`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
let [_count, _setcount] = _createSignal(0);"
`;

exports[`ctf > $signal > should transform $signal bindings 1`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
let [_count, _setcount] = _createSignal(0);
const value = _count();"
`;

exports[`ctf > $signal > should transform $signal bindings 2`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
let [_count, _setcount] = _createSignal(0);
const value = {
  count: _count()
};"
`;

exports[`ctf > $signal > should transform $signal bindings 3`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
let [_count, _setcount] = _createSignal(0);
async function exampleA() {
  const _tmp = await asyncValue();
  _setcount(() => _tmp);
}
function* exampleB() {
  const _tmp2 = yield asyncValue();
  _setcount(() => _tmp2);
}
async function* exampleC() {
  const _tmp3 = yield asyncValue();
  _setcount(() => _tmp3);
}
const example = async () => {
  const _tmp4 = await asyncValue();
  return _setcount(() => _tmp4);
};"
`;

exports[`ctf > $signal > should transform $signal bindings for $get 1`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
let [_count, _setcount] = _createSignal(0);
const value = _count;"
`;

exports[`ctf > $signal > should transform $signal bindings for $getter 1`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
const _proto = {
  get count() {
    return this.__$get__count();
  }
};
let [_count, _setcount] = _createSignal(0);
const value = {
  __proto__: _proto,
  __$get__count: _count
};"
`;

exports[`ctf > $signal > should transform $signal bindings for $property 1`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
const _proto = {
  get count() {
    return this.__$get__count();
  },
  set count(_param) {
    this.__$set__count(() => _param);
  }
};
let [_count, _setcount] = _createSignal(0);
const value = {
  __proto__: _proto,
  __$get__count: _count,
  __$set__count: _setcount
};"
`;

exports[`ctf > $signal > should transform $signal bindings for $refSignal 1`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
let [_count, _setcount] = _createSignal(0);
const value = [_count, _setcount];"
`;

exports[`ctf > $signal > should transform $signal bindings for $set 1`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
let [_count, _setcount] = _createSignal(0);
const value = _setcount;"
`;

exports[`ctf > $signal > should transform $signal bindings for $setter 1`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
const _proto = {
  set count(_param) {
    this.__$set__count(() => _param);
  }
};
let [_count, _setcount] = _createSignal(0);
const value = {
  __proto__: _proto,
  __$set__count: _setcount
};"
`;

exports[`ctf > variable shadowing > should respect variable shadowing 1`] = `
"import { createSignal as _createSignal } from \\"solid-js\\";
const [_selected, _setselected] = _createSignal('root');
{
  const selected = 'local';
  console.log(selected); // 'local'
  {
    console.log('local'); // 'local'
    {
      const [_selected2, _setselected2] = _createSignal('inner');
      console.log(_selected2()); // 'inner'
      {
        console.log(_selected2()); // 'inner'
      }
    }
  }
}"
`;
